@inject IDataService data

@if (IsOpen)
{
    <div class="modal" tabindex="-1" style="display:block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Форма редактирования</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Cancel"></button>
                </div>

                <div class="modal-body">
                    <EditForm Model="@newTaskItem">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="newTaskName" class="form-label">Название задачи</label>
                            <InputText id="newTaskName" class="form-control" @bind-Value="newTaskItem!.Name" />
                            <ValidationMessage For="@(() => newTaskItem.Name)" />
                        </div>

                        <div class="mb-3">
                            <label for="newTaskDescription" class="form-label">Тема задачи</label>
                            <InputText id="newTaskDescription" class="form-control" @bind-Value="newTaskItem!.Theme" />
                            <ValidationMessage For="@(() =>newTaskItem.Theme)" />
                        </div>

                        <div class="mb-3">
                            <label for="newTaskContent" class="form-label">Текст задачи</label>
                            <InputTextArea id="newTaskContent" class="form-control" style="height: 150px;" @bind-Value="newTaskItem!.Text" />
                            <ValidationMessage For="@(() => newTaskItem.Text)" />
                        </div>

                        <div class="mb-3">
                            <label for="taskContent" class="form-label">Время окончания</label>
                            <InputDate class="form-control" Type="InputDateType.DateTimeLocal" @bind-Value="newTaskItem!.DateOfCompletion" />
                        </div>

                        <div class="modal-footer">
                            <button class="btn btn-danger" @onclick="Cancel">Отмена</button>
                            <button type="submit" class="btn btn-success" @onclick="HandleValidSubmit">Сохранить</button>
                        </div>

                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public TaskItemDTO? TaskItem { get; set; }

    [EditorRequired]
    public TaskItemDTO newTaskItem { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        await Task.Run(() => {
            if (TaskItem != null)
            {
                newTaskItem.Id = TaskItem!.Id;
                newTaskItem.Name = TaskItem!.Name;
                newTaskItem.Theme = TaskItem!.Theme;
                newTaskItem.Text = TaskItem!.Text;
                newTaskItem.DateOfCreation = TaskItem!.DateOfCreation;
                newTaskItem.DateOfCompletion = TaskItem!.DateOfCompletion;
                newTaskItem.TType = TaskItem!.TType;
            }
        });
    }

    private async Task HandleValidSubmit()
    {
        await data.SaveAsync(newTaskItem);
        await Task.Run(() => newTaskItem = new());
        await IsOpenChanged.InvokeAsync(false);
    }

    private async void Cancel()
    {
        await Task.Run(() => newTaskItem = new());
        await IsOpenChanged.InvokeAsync(false);
    }
}