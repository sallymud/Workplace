@page "/"

@inject IDataService data

<PageTitle>Список задач</PageTitle>

<h3>Список задач</h3>

@if (tasks == null)
{
    <p>Loading ...</p>
}
else
{
    <div>
        <button type="button" class="btn btn-primary" style="position: absolute; top: 0; left: 0; margin: 70px 0 0 500px" @onclick="OpenAddTaskDialog">Новая задача</button>
    </div>
    @foreach (var task in tasks)
    {
        <div class="card" style="width: 18rem; margin: 5px 10px 5px 0; display: inline-block;">
            <TaskCard TaskItem="task" EditTaskItem="OpenEditTaskDialog" OnDelete="OnDelete" />
        </div>
    }
}

<TaskDialogCreate IsOpen="@isAddTaskDialogOpen" IsOpenChanged="@OnAddTaskDialogClosed" OnTaskAdded="@AddTaskItemAsync" />
<TaskDialogEdit IsOpen="@isEditTaskDialogOpen" IsOpenChanged="@OnEditTaskDialogClosed" TaskItem="@editableTask" />

@code {
    IEnumerable<TaskItemDTO>? tasks;
    TaskItemDTO? editableTask;
    private bool isAddTaskDialogOpen;
    private bool isEditTaskDialogOpen;

    protected override async Task OnParametersSetAsync()
    {
        tasks = await data.GetDataAsync();
    }
    async Task OpenAddTaskDialog()
    {
        await Task.Run(() => isAddTaskDialogOpen = true);
    }

    async Task OnAddTaskDialogClosed(bool isOpen)
    {
        await Task.Run(() => isAddTaskDialogOpen = isOpen);
    }

    async Task OpenEditTaskDialog(TaskItemDTO editItem)
    {
        await Task.Run(() => {
            isEditTaskDialogOpen = true;
            editableTask = editItem;
        });
    }

    async Task OnEditTaskDialogClosed(bool isOpen)
    {
        await Task.Run(() => isEditTaskDialogOpen = isOpen);
    }

    async Task AddTaskItemAsync(TaskItemDTO newTask)
    {
        await data.AddAsync(newTask);
    }
    
    async Task OnDelete(int Id) 
    {
        await data.RemoveAsync(Id);
    }
}
