@page "/"

@inject IDataService data

<PageTitle>Список задач</PageTitle>

<h3>Список задач</h3>

@if (tasks == null)
{
    <p>Loading ...</p>
}
else
{
    <div>
        <button type="button" class="btn btn-primary" style="position: absolute; top: 80px; right: 50px;" @onclick="OpenAddTaskDialog">Новая задача</button>
    </div>
    <div class="container" style="margin-top: 40px;">
        <div class="row" style="justify-content: center;">
            <div class="col-md-3">
                <div class="card text-center rounded-5" style="background-color: #9ec5fe; margin-bottom: 10px;">
                    <div class="card-body">
                        Расписание
                    </div>
                </div>

                <div class="list-group" style="justify-content: center; overflow-y: scroll;">
                    @foreach (var task in tasks)
                    {
                        @if (task.TType == TaskItemDTO.TaskType.Расписание)
                        {
                            <p style="margin-bottom: 7px;" >
                                <div class="card" style="width: 18rem;">
                                    <TaskCard TaskItem="task" EditTaskItem="OpenEditTaskDialog" OnDelete="OnDelete" />
                                </div>
                            </p>
                        }
                    }
                </div>
            </div>

            <div class="col-md-3">
                <div class="card text-center rounded-5" style="background-color: #efadce; margin-bottom: 10px; ">
                    <div class="card-body">
                        Мероприятия
                    </div>
                </div>

                <div class="list-group" style="justify-content: center; overflow-y: scroll;">
                    @foreach (var task in tasks)
                    {
                        @if (task.TType == TaskItemDTO.TaskType.Мероприятия)
                        {
                            <p style="margin-bottom: 7px;">
                                <div class="card" style="width: 18rem;">
                                    <TaskCard TaskItem="task" EditTaskItem="OpenEditTaskDialog" OnDelete="OnDelete" />
                                </div>
                            </p>
                        }
                    }
                </div>
            </div>

            <div class="col-md-3">
                <div class="card text-center rounded-5" style="background-color: #a6e9d5; margin-bottom: 10px;">
                    <div class="card-body">
                        Территориальный отдел
                    </div>
                </div>

                <div class="list-group" style="justify-content: center; overflow-y: scroll;">
                    @foreach (var task in tasks)
                    {
                        @if (task.TType == TaskItemDTO.TaskType.ТеррОтдел)
                        {
                            <p style="margin-bottom: 7px;">
                                <div class="card" style="width: 18rem;">
                                    <TaskCard TaskItem="task" EditTaskItem="OpenEditTaskDialog" OnDelete="OnDelete" />
                                </div>
                            </p>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

<TaskDialogCreate IsOpen="@isAddTaskDialogOpen" IsOpenChanged="@OnAddTaskDialogClosed" OnTaskAdded="@AddTaskItemAsync" />
<TaskDialogEdit IsOpen="@isEditTaskDialogOpen" IsOpenChanged="@OnEditTaskDialogClosed" TaskItem="@editableTask" />

@code {
    IEnumerable<TaskItemDTO>? tasks;
    TaskItemDTO? editableTask;
    private bool isAddTaskDialogOpen;
    private bool isEditTaskDialogOpen;

    protected override async Task OnParametersSetAsync()
    {
        tasks = await data.GetDataAsync();
    }
    async Task OpenAddTaskDialog()
    {
        await Task.Run(() => isAddTaskDialogOpen = true);
    }

    async Task OnAddTaskDialogClosed(bool isOpen)
    {
        await Task.Run(() => isAddTaskDialogOpen = isOpen);
    }

    async Task OpenEditTaskDialog(TaskItemDTO editItem)
    {
        await Task.Run(() => {
            isEditTaskDialogOpen = true;
            editableTask = editItem;
        });
    }

    async Task OnEditTaskDialogClosed(bool isOpen)
    {
        await Task.Run(() => isEditTaskDialogOpen = isOpen);
    }

    async Task AddTaskItemAsync(TaskItemDTO newTask)
    {
        await data.AddAsync(newTask);
    }
    
    async Task OnDelete(int Id) 
    {
        await data.RemoveAsync(Id);
    }
}
